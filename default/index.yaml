# These variables are made globally available in the HTML templates.
# Make sure that they do not conflict with HTML tag names.
# You can override them on a per-note or per-directory basis by creating the
# associated .yaml file.

# Order is used by Emanote to determine the sidebar order of notes.
order: 0

tags: []

# TODO: How to design this when generating RSS feeds?
template:
  # Which template to use to render notes. The filepath without the .tpl extension.
  name: /templates/layouts/book
  # Layout specific settings
  layout:
    # For base.tpl
    base:
      # The class to apply for <body> element when using base.tpl (used by note and book layouts)
      bodyClass: bg-gray-400 overflow-y-scroll
    note:
      containerClass: container mx-auto max-w-prose
  error:
    containerClass: container mx-auto max-w-prose
  uptree:
    # Class to apply for uptree's nodes
    nodeClass: text-gray-900
  # List of available colors: https://v2.tailwindcss.com/docs/customizing-colors#default-color-palette
  theme: blue
  # Value of the <base> tag.
  baseUrl: /
  # Change this to 'pretty' if you want URLs without the '.html' suffix.
  urlStrategy: direct
  iconUrl: ${ema:homeUrl}favicon.svg
  sidebar:
    # Whether this node in the sidebar tree should remain collapsed by default
    # (unless a route in it is active)
    collapsed: true

pandoc:
  # Rewrite the class specified in Pandoc's Div and Span nodes. You can specify the class using
  # https://github.com/jgm/commonmark-hs/blob/master/commonmark-extensions/test/attributes.md
  #
  # This feature is useful when managing a "library" of CSS styling to use on
  # Markdown text, especially when using Tailwind.
  rewriteClass:
    # How to style inline tags. Tag-specific styles can be applied as well.
    emanote:inline-tag: font-bold bg-gray-100 py-0.5 px-2 rounded-lg
    # This style is used by `#a/red/tag` in addition to the generic style above.
    # As this class comes *after* the generic class, it can override the styles
    # in the generic class.
    emanote:inline-tag:a/red/tag: bg-red-100
    emanote:placeholder-message: text-gray-400 border-t-2 inline-block pt-0.5
    emanote:error: text-l bg-red-100 p-2 border-2 border-black m-2 font-mono
    emanote:error:aside: font-mono align-top text-xs mr-1 tracking-tighter opacity-50 hover:opacity-100
    # You can also add your own class -> style mappings. We provide a sample below.
    sticky-note: px-3 py-1 rounded shadow bg-yellow-100 mx-2 transform -skew-y-1 scale-95 hover:scale-100 hover:border-yellow-400 hover:shadow-lg border-t-8 border-yellow-200 mb-8 mt-8
    note: p-2 mb-3 rounded shadow bg-gray-100 w-full float-none md:float-right md:w-1/2 md:clear-both
    highlight-block: px-3 py-1 mb-3 rounded bg-${theme}-100 hover:border-${theme}-400 hover:shadow border-t-8 border-${theme}-200
    highlight-inline: bg-yellow-200 px-2 py-0.5 rounded-xl
    center: flex justify-center items-center mx-auto

# Put page-specific metadata here. Override them in Markdown frontmatter or
# per-folder YAML as necessary.
page:
  siteTitle: My Emanote Site
  # Desription is expected to be set on a per-page basis.
  # By default, the first paragraph is used for description.
  # Used for https://ogp.me/
  description: ""

  # Image URL for previews.
  # By default, the first image URL is used. Note: wikilink are not yet
  # supported.
  # Used for https://ogp.me/
  image: ""

  # Put anything that should go in <head> of these routes here:
  # You can reference other metadata keys using <snippet var=".." />
  # Or use the JS behaviour library below.
  headHtml: |
    <meta name="generator" content="Emanote" />

# Builtin JS behaviour library. Use them in `page.headHtml` of your .yaml or .md
# frontmatter.
js:
  # Syntax highlighting using prism.js
  prism: |
    <!-- Prism.js (doesn't work great in live server) -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/plugins/autoloader/prism-autoloader.min.js"></script>
  # Syntax highlighting using highlight.js
  highlightjs: |
    <!-- highlight.js -->
    <with var="js">
    <link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/${value:highlightjs-ver}/styles/hybrid.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/${value:highlightjs-ver}/highlight.min.js"></script>
    <!-- Include languages that Emanote itself uses -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/${value:highlightjs-ver}/languages/haskell.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/${value:highlightjs-ver}/languages/nix.min.js"></script>
    <script>hljs.highlightAll();</script>
    </with>
  highlightjs-ver: 11.6.0 # Ref: https://cdnjs.com/libraries/highlight.js
  # Diagrams using mermaid.js
  mermaid: |
    <!-- mermaid.js -->
    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
    <script>
      mermaid.initialize({startOnLoad:false});
      mermaid.init(undefined,document.querySelectorAll(".mermaid"));
    </script>
  mathjax: |
    <script>
      window.MathJax = {
        startup: {
          ready: () => {
            MathJax.startup.defaultReady();
          }
        }
      };
    </script>
    <script async="" id="MathJax-script" src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

  stork-search-base: |
    <link rel="stylesheet" href="https://files.stork-search.net/releases/v1.5.0/basic.css" />
    <!-- Stork-search styling base stylings -->
    <style>
      .stork-wrapper.hidden {
        /* undo the hidden styling, in effect enabling the search box */
        display: block;
      }

      .stork-wrapper .stork-output {
        margin-top: 0;
        border-radius: 0;
        position: sticky;
        border-color: rgba(99,102,241,var(--tw-border-opacity));
        --tw-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),0 4px 6px -2px rgba(0, 0, 0, 0.05);
        box-shadow: var(--tw-ring-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow);
      }

      .stork-wrapper .stork-message {
        padding: 0.5rem 1rem;
        border-radius: 0;
        border-color: rgba(99,102,241,var(--tw-border-opacity));
      }

      .stork-wrapper .stork-close-button {
        top: 0;
        margin: 0.8em 0.6em;
      }

      .stork-wrapper .stork-close-button svg {
        top: unset;
        margin-left: auto;
        margin-right: auto;
      }
    </style>
    <!-- Stork search scripts, styling added in more-head.tpl -->
    <script src="https://files.stork-search.net/releases/v1.5.0/stork.js"></script>
    <ema:metadata>
      <with var="template">
        <script data-emanote-base-url="${value:baseUrl}">
          (function() {
            const indexName = 'emanote-search'; // used to match input[data-stork] attribute value
            const baseUrl = document.currentScript.getAttribute('data-emanote-base-url') || '/';
            const indexUrl = baseUrl + '-/stork.st';
            if (document.readyState !== 'complete') {
              window.addEventListener('load', function() {
                stork.register(indexName, indexUrl);
              });
            } else {
              stork.register(indexName, indexUrl, {forceOverwrite: true});
            }
          })();
        </script>
      </with>
    </ema:metadata>
  stork-search-book: |
    <snippet var="js.stork-search-base"/>
    <!-- Stork-search styling, specific to Emanote's book layout -->
    <style>
      .stork-wrapper > input {
        border-top-color: rgba(209,213,219,var(--tw-border-opacity));
        border-left-color: transparent;
        border-right-color: transparent;
      }

      @media (min-width: 768px) {
        .stork-wrapper > input {
          border-top-color: transparent;
          border-right-color: rgba(209,213,219,var(--tw-border-opacity));
        }

        .stork-wrapper .stork-output {
          top: 0;
          left: calc(100% - 1px);
          position: absolute;
          width: calc(768px - 12rem);
        }

        .stork-wrapper {
          margin-right: -1px;
        }
      }

      @media (min-width: 1024px) {
        .stork-wrapper .stork-output {
          width: calc(1024px - 12rem);
        }
      }

      @media (min-width: 1280px) {
        .stork-wrapper .stork-output {
          width: calc(1280px - 16rem);
        }
      }

      @media (min-width: 1536px) {
        .stork-wrapper .stork-output {
          width: calc(1536px - 16rem);
        }
      }

      nav#sidebar {
        z-index: 100;
      }
    </style>
  stork-search-note: |
    <snippet var="js.stork-search-base"/>
    <!-- Stork-search styling, specific to Emanote's Neuron-like layout -->
    <style>
      .stork-wrapper .stork-output {
        position: absolute;
      }

      .stork-wrapper > input {
        border-top-color: transparent;
        border-left-color: transparent;
        border-right-color: transparent;
      }
    </style>
  # This adds styling for the "default layout", and should
  # be used if you rely on Emanote's default layout.
  stork-search: |
    <snippet var="js.stork-search-book"/>

emanote:
  # Whether to automatically treat folder notes as a folgezettel parent of its contents
  folder-folgezettel: true
